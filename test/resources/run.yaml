label: >-
  Hello world with `:provides` using `:then`, having differing structure.
env: {}
config:
  main:
  - name: test1
  - parent:
      module:
      - provides:
        - key: OBJ
          value:
            foo: «FOO
      - checkpoint:
          display: Echoing hello
          source: echo hello
          nodes:
          - stdout: FOO
      outputs:
        obj: «OBJ
    child:
      module:
      - requires: [obj]
      - checkpoint:
          display: Repeating «{obj.foo}.
          source: echo «{obj.foo}«{OBJ.foo}
      inputs:
        obj: «obj
expected:
  header:
    name: test1
  env: {}
  body:
  - parent:
      module:
        header:
          name:
          provides:
          - key: OBJ
            value:
              foo: «FOO
        env: {obj: {foo: hello}}
        body:
        - checkpoint:
          - &result
            display: Echoing hello
            source: echo hello
            stdout: {keys: [null, FOO], value: "hello"}
            stderr: {keys: [null, null], value: ""}
            exit: {keys: [null, null], value: 0}
            success: {keys: [null, null], value: true}
            node: {name: local, stdout: FOO}
            user:
            proxy:
          env: {FOO: "hello"}
      outputs: {obj: «OBJ}
    child:
      module:
        header:
          name:
          requires: [obj]
        env: {}
        body:
        - checkpoint:
          - <<: *result
            display: Repeating hello.
            node: {name: local}
            stdout: {keys: [null, null], value: "hello"}
          env: {}
      inputs:
        obj: «obj

---

label: >-
  Hello world with `:provides` using `:then`, having differing structure; then inputs using
  key as string literal.
env: {}
config:
  main:
  - name: test1
  - parent:
      module:
      - provides:
        - key: OBJ
          value:
            foo: «FOO
      - checkpoint:
          display: Echoing hello
          source: echo hello
          nodes:
          - stdout: FOO
      outputs:
        obj: «OBJ
    child:
      inputs:
        A: "This is the message: «{obj.foo}"
        obj: «obj
      module:
      - requires:
        - A
        - obj
      - checkpoint:
          display: Repeating «{obj.foo} and «{A}.
          source: echo «{obj.foo} «{A}«{OBJ.foo}
expected:
  header:
    name: test1
  env: {}
  body:
  - parent:
      module:
        header:
          name:
          provides:
          - key: OBJ
            value:
              foo: «FOO
        env: {obj: {foo: hello}}
        body:
        - checkpoint:
          - &result
            display: Echoing hello
            source: echo hello
            stdout: {keys: [null, FOO], value: "hello"}
            stderr: {keys: [null, null], value: ""}
            exit: {keys: [null, null], value: 0}
            success: {keys: [null, null], value: true}
            node: {name: local, stdout: FOO}
            user:
            proxy:
          env: {FOO: "hello"}
      outputs: {obj: «OBJ}
    child:
      module:
        header:
          name:
          requires: [A, obj]
        env: {}
        body:
        - checkpoint:
          - <<: *result
            display: "Repeating hello and This is the message: hello."
            source: "echo hello This is the message: hello"
            node: {name: local}
            stdout: {keys: [null, null], value: "hello This is the message: hello"}
          env: {}
      inputs:
        A: "This is the message: «{obj.foo}"
        obj: «obj

---

label: >-
  Hello world with `:provides` as string literal, using `:then`; then inputs using
  key as map (without default).
env: {}
config:
  main:
  - name: test1
  - parent:
      module:
      - provides:
        - FOO
      - checkpoint:
          display: Echoing hello
          source: echo hello
          nodes:
          - stdout: FOO
      outputs:
        foo: «FOO
    child:
      inputs:
        A: "This is the message: «{foo}"
        foo: «foo
      module:
      - requires:
        - key: A
        - foo
      - checkpoint:
          display: Repeating «{foo} and «{A}.
          source: echo «{foo} «{A}«{FOO}
expected:
  header:
    name: test1
  env: {}
  body:
  - parent:
      module:
        header:
          name:
          provides:
          - FOO
        env: {foo: hello}
        body:
        - checkpoint:
          - &result
            display: Echoing hello
            source: echo hello
            stdout: {keys: [null, FOO], value: "hello"}
            stderr: {keys: [null, null], value: ""}
            exit: {keys: [null, null], value: 0}
            success: {keys: [null, null], value: true}
            node: {name: local, stdout: FOO}
            user:
            proxy:
          env: {FOO: "hello"}
      outputs: {foo: «FOO}
    child:
      module:
        header:
          name:
          requires:
          - key: A
          - foo
        env: {}
        body:
        - checkpoint:
          - <<: *result
            display: "Repeating hello and This is the message: hello."
            source: "echo hello This is the message: hello"
            node: {name: local}
            stdout: {keys: [null, null], value: "hello This is the message: hello"}
          env: {}
      inputs:
        A: "This is the message: «{foo}"
        foo: «foo

---

label: >-
  Hello world with `:provides` as string literal, using `:then`; then inputs using
  key as map (with unused default).
env: {}
config:
  main:
  - name: test1
  - parent:
      module:
      - provides:
        - FOO
      - checkpoint:
          display: Echoing hello
          source: echo hello
          nodes:
          - stdout: FOO
      outputs:
        foo: «FOO
    child:
      inputs:
        A: "This is the message: «{foo}"
        foo: «foo
      module:
      - requires:
        - key: A
          default: lalala
        - foo
      - checkpoint:
          display: Repeating «{foo} and «{A}.
          source: echo «{foo} «{A}«{FOO}
expected:
  header:
    name: test1
  env: {}
  body:
  - parent:
      module:
        header:
          name:
          provides:
          - FOO
        env: {foo: hello}
        body:
        - checkpoint:
          - &result
            display: Echoing hello
            source: echo hello
            stdout: {keys: [null, FOO], value: "hello"}
            stderr: {keys: [null, null], value: ""}
            exit: {keys: [null, null], value: 0}
            success: {keys: [null, null], value: true}
            node: {name: local, stdout: FOO}
            user:
            proxy:
          env: {FOO: "hello"}
      outputs: {foo: «FOO}
    child:
      module:
        header:
          name:
          requires:
          - key: A
            default: lalala
          - foo
        env: {}
        body:
        - checkpoint:
          - <<: *result
            display: "Repeating hello and This is the message: hello."
            source: "echo hello This is the message: hello"
            node: {name: local}
            stdout: {keys: [null, null], value: "hello This is the message: hello"}
          env: {}
      inputs:
        A: "This is the message: «{foo}"
        foo: «foo

---

label: >-
  Hello world with `:provides` as string literal, using `:then`; then inputs using
  mixed `:requires` inputs: string and map (map with useful default).
env: {}
config:
  main:
  - name: test1
  - parent:
      module:
      - provides:
        - FOO
      - checkpoint:
          display: Echoing hello
          source: echo hello
          nodes:
          - stdout: FOO
      outputs:
        foo: «FOO
    child:
      inputs:
        A: "This is the message: «{foo}"
        foo: «foo
      module:
      - requires:
        - A
        - key: B
          default: lalala
        - foo
      - checkpoint:
          display: Repeating «{foo} and «{A} «{B}.
          source: echo «{foo} «{A}«{FOO} «{B}
expected:
  header:
    name: test1
  env: {}
  body:
  - parent:
      module:
        header:
          name:
          provides:
          - FOO
        env: {foo: hello}
        body:
        - checkpoint:
          - &result
            display: Echoing hello
            source: echo hello
            stdout: {keys: [null, FOO], value: "hello"}
            stderr: {keys: [null, null], value: ""}
            exit: {keys: [null, null], value: 0}
            success: {keys: [null, null], value: true}
            node: {name: local, stdout: FOO}
            user:
            proxy:
          env: {FOO: "hello"}
      outputs: {foo: «FOO}
    child:
      module:
        header:
          name:
          requires:
          - A
          - key: B
            default: lalala
          - foo
        env: {}
        body:
        - checkpoint:
          - <<: *result
            display: "Repeating hello and This is the message: hello lalala."
            source: "echo hello This is the message: hello lalala"
            node: {name: local}
            stdout: {keys: [null, null], value: "hello This is the message: hello lalala"}
          env: {}
      inputs:
        A: "This is the message: «{foo}"
        foo: «foo

---

label: >-
  Hello world with `:then`, using `:module` `:out` randomly.
env: {}
config:
  main:
  - name: test1
  - parent:
      module:
      - provides:
        - FOO
      - checkpoint:
          display: Echoing hello
          source: echo hello
          nodes:
          - stdout: FOO
      outputs:
        foo: «FOO
    child:
    - inputs:
        A: "This is the message: «{foo}"
        foo: «foo
      module:
      - requires:
        - A
        - key: B
          default: «{A} lalala
        - foo
      - checkpoint:
          display: Repeating «{foo} and «{A} «{B}.
          source: echo «{foo} «{A}«{FOO} «{B}
    - this:
        is:
          a:
            test: «foo
expected:
  header:
    name: test1
  env: {}
  body:
  - parent:
      module:
        header:
          name:
          provides:
          - FOO
        env: {foo: hello}
        body:
        - checkpoint:
          - &result
            display: Echoing hello
            source: echo hello
            stdout: {keys: [null, FOO], value: "hello"}
            stderr: {keys: [null, null], value: ""}
            exit: {keys: [null, null], value: 0}
            success: {keys: [null, null], value: true}
            node: {name: local, stdout: FOO}
            user:
            proxy:
          env: {FOO: "hello"}
      outputs: {foo: «FOO}
    child:
    - module:
        header:
          name:
          requires:
          - A
          - key: B
            default: «{A} lalala
          - foo
        env: {}
        body:
        - checkpoint:
          - <<: *result
            display: "Repeating hello and This is the message: hello This is the message: hello lalala."
            source: "echo hello This is the message: hello This is the message: hello lalala"
            node: {name: local}
            stdout: {keys: [null, null],
                     value: "hello This is the message: hello This is the message: hello lalala"}
          env: {}
      inputs:
        A: "This is the message: «{foo}"
        foo: «foo
    - this:
        is:
          a:
            test: hello

---

label: >-
  Reducing the outputs of several modules into a list.
env: {}
config:
  main:
  - name: test1
  - parent:
      module:
      - provides:
          foos:
            (conj: [«foos, «FOO]
      - (pmap:
        - (fn:
          - [idx]
          - module:
            - requires:
              - idx
              provides:
              - FOO
            - checkpoint:
                display: Echoing hello «{idx}.
                source: echo hello «{idx}
                nodes:
                - stdout: FOO
            inputs: {idx: «idx}
            outputs: [FOO]
        - (range: [0,3]
      outputs: [foos]
    child:
      inputs:
        A: "«{#foos}«{.} «{/foos}"
      module:
      - requires:
        - A
      - checkpoint:
          display: Echoing «{A}.
          source: echo «{A}
expected:
  header:
    name: test1
  env: {}
  body:
  - parent:
      module:
        header:
          name:
          provides:
            foos:
              (conj: [«foos, «FOO]
        env:
          foos: ["hello 0", "hello 1", "hello 2"]
        body:
        - - module:
              header:
                name:
                provides: [FOO]
                requires: [idx]
              env: {FOO: "hello 0"}
              body:
              - checkpoint:
                - display: Echoing hello 0.
                  source: echo hello 0
                  stdout: {keys: [null, FOO], value: "hello 0"}
                  stderr: {keys: [null, null], value: ""}
                  exit: {keys: [null, null], value: 0}
                  success: {keys: [null, null], value: true}
                  node: {name: local, stdout: FOO}
                  user:
                  proxy:
                env: {FOO: hello 0}
            inputs: {idx: «idx}
            outputs: [FOO]
          - module:
              header:
                name:
                provides: [FOO]
                requires: [idx]
              env: {FOO: "hello 1"}
              body:
              - checkpoint:
                - display: Echoing hello 1.
                  source: echo hello 1
                  stdout: {keys: [null, FOO], value: "hello 1"}
                  stderr: {keys: [null, null], value: ""}
                  exit: {keys: [null, null], value: 0}
                  success: {keys: [null, null], value: true}
                  node: {name: local, stdout: FOO}
                  user:
                  proxy:
                env: {FOO: hello 1}
            inputs: {idx: «idx}
            outputs: [FOO]
          - module:
              header:
                name:
                provides: [FOO]
                requires: [idx]
              env: {FOO: "hello 2"}
              body:
              - checkpoint:
                - display: Echoing hello 2.
                  source: echo hello 2
                  stdout: {keys: [null, FOO], value: "hello 2"}
                  stderr: {keys: [null, null], value: ""}
                  exit: {keys: [null, null], value: 0}
                  success: {keys: [null, null], value: true}
                  node: {name: local, stdout: FOO}
                  user:
                  proxy:
                env: {FOO: hello 2}
            inputs: {idx: «idx}
            outputs: [FOO]
      outputs: [foos]
    child:
      inputs:
        A: "«{#foos}«{.} «{/foos}"
      module:
        header:
          name:
          requires:
          - A
        env: {}
        body:
        - checkpoint:
          - display: "Echoing hello 0 hello 1 hello 2 ."
            source: "echo hello 0 hello 1 hello 2 "
            stdout: {keys: [null, null], value: "hello 0 hello 1 hello 2"}
            stderr: {keys: [null, null], value: ""}
            exit: {keys: [null, null], value: 0}
            success: {keys: [null, null], value: true}
            node: {name: local}
            user:
            proxy:
          env: {}

