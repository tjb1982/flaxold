label: >-
  Hello world with `:provides` using `:then`, having differing structure.
env: {}
config:
  main:
  - name: test1
  - parent:
      module:
      - provides:
        - key: OBJ
          value:
            foo: ~@FOO
      - checkpoint:
          display: Echoing hello
          source: echo hello
          nodes:
          - stdout: FOO
      outputs:
        obj: ~@OBJ
    child:
      module:
      - requires: [obj]
      - checkpoint:
          display: Repeating ~{obj.foo}.
          source: echo ~{obj.foo}~{OBJ.foo}
      inputs:
        obj: ~@obj
expected:
- name: test1
- parent:
    module:
    - name:
      provides:
      - key: OBJ
        value:
          foo: ~@FOO
    - checkpoint:
      - &result
        display: Echoing hello
        source: echo hello
        stdout: {keys: [null, FOO], value: "hello"}
        stderr: {keys: [null, null], value: ""}
        exit: {keys: [null, null], value: 0}
        success: {keys: [null, null], value: true}
        node: {name: local, stdout: FOO}
        user:
        proxy:
      env: {FOO: "hello"}
    outputs: {obj: ~@OBJ}
  child:
    module:
    - name:
      requires: [obj]
    - checkpoint:
      - <<: *result
        display: Repeating hello.
        node: {name: local}
        stdout: {keys: [null, null], value: "hello"}
      env: {}
    inputs:
      obj: ~@obj

---

label: >-
  Hello world with `:provides` using `:then`, having differing structure; then inputs using
  key as string literal.
env: {}
config:
  main:
  - name: test1
  - parent:
      module:
      - provides:
        - key: OBJ
          value:
            foo: ~@FOO
      - checkpoint:
          display: Echoing hello
          source: echo hello
          nodes:
          - stdout: FOO
      outputs:
        obj: ~@OBJ
    child:
      inputs:
        A: "This is the message: ~{obj.foo}"
        obj: ~@obj
      module:
      - requires:
        - A
        - obj
      - checkpoint:
          display: Repeating ~{obj.foo} and ~{A}.
          source: echo ~{obj.foo} ~{A}~{OBJ.foo}
expected:
- name: test1
- parent:
    module:
    - name:
      provides:
      - key: OBJ
        value:
          foo: ~@FOO
    - checkpoint:
      - &result
        display: Echoing hello
        source: echo hello
        stdout: {keys: [null, FOO], value: "hello"}
        stderr: {keys: [null, null], value: ""}
        exit: {keys: [null, null], value: 0}
        success: {keys: [null, null], value: true}
        node: {name: local, stdout: FOO}
        user:
        proxy:
      env: {FOO: "hello"}
    outputs: {obj: ~@OBJ}
  child:
    module:
    - name:
      requires: [A, obj]
    - checkpoint:
      - <<: *result
        display: "Repeating hello and This is the message: hello."
        source: "echo hello This is the message: hello"
        node: {name: local}
        stdout: {keys: [null, null], value: "hello This is the message: hello"}
      env: {}
    inputs:
      A: "This is the message: ~{obj.foo}"
      obj: ~@obj

---

label: >-
  Hello world with `:provides` as string literal, using `:then`; then inputs using
  key as map (without default).
env: {}
config:
  main:
  - name: test1
  - parent:
      module:
      - provides:
        - FOO
      - checkpoint:
          display: Echoing hello
          source: echo hello
          nodes:
          - stdout: FOO
      outputs:
        foo: ~@FOO
    child:
      inputs:
        A: "This is the message: ~{foo}"
        foo: ~@foo
      module:
      - requires:
        - key: A
        - foo
      - checkpoint:
          display: Repeating ~{foo} and ~{A}.
          source: echo ~{foo} ~{A}~{FOO}
expected:
- name: test1
- parent:
    module:
    - name:
      provides:
      - FOO
    - checkpoint:
      - &result
        display: Echoing hello
        source: echo hello
        stdout: {keys: [null, FOO], value: "hello"}
        stderr: {keys: [null, null], value: ""}
        exit: {keys: [null, null], value: 0}
        success: {keys: [null, null], value: true}
        node: {name: local, stdout: FOO}
        user:
        proxy:
      env: {FOO: "hello"}
    outputs: {foo: ~@FOO}
  child:
    module:
    - name:
      requires:
      - key: A
      - foo
    - checkpoint:
      - <<: *result
        display: "Repeating hello and This is the message: hello."
        source: "echo hello This is the message: hello"
        node: {name: local}
        stdout: {keys: [null, null], value: "hello This is the message: hello"}
      env: {}
    inputs:
      A: "This is the message: ~{foo}"
      foo: ~@foo

---

label: >-
  Hello world with `:provides` as string literal, using `:then`; then inputs using
  key as map (with unused default).
env: {}
config:
  main:
  - name: test1
  - parent:
      module:
      - provides:
        - FOO
      - checkpoint:
          display: Echoing hello
          source: echo hello
          nodes:
          - stdout: FOO
      outputs:
        foo: ~@FOO
    child:
      inputs:
        A: "This is the message: ~{foo}"
        foo: ~@foo
      module:
      - requires:
        - key: A
          default: lalala
        - foo
      - checkpoint:
          display: Repeating ~{foo} and ~{A}.
          source: echo ~{foo} ~{A}~{FOO}
expected:
- name: test1
- parent:
    module:
    - name:
      provides:
      - FOO
    - checkpoint:
      - &result
        display: Echoing hello
        source: echo hello
        stdout: {keys: [null, FOO], value: "hello"}
        stderr: {keys: [null, null], value: ""}
        exit: {keys: [null, null], value: 0}
        success: {keys: [null, null], value: true}
        node: {name: local, stdout: FOO}
        user:
        proxy:
      env: {FOO: "hello"}
    outputs: {foo: ~@FOO}
  child:
    module:
    - name:
      requires:
      - key: A
        default: lalala
      - foo
    - checkpoint:
      - <<: *result
        display: "Repeating hello and This is the message: hello."
        source: "echo hello This is the message: hello"
        node: {name: local}
        stdout: {keys: [null, null], value: "hello This is the message: hello"}
      env: {}
    inputs:
      A: "This is the message: ~{foo}"
      foo: ~@foo

---

label: >-
  Hello world with `:provides` as string literal, using `:then`; then inputs using
  mixed `:requires` inputss: string and map (map with useful default).
env: {}
config:
  main:
  - name: test1
  - parent:
      module:
      - provides:
        - FOO
      - checkpoint:
          display: Echoing hello
          source: echo hello
          nodes:
          - stdout: FOO
      outputs:
        foo: ~@FOO
    child:
      inputs:
        A: "This is the message: ~{foo}"
        foo: ~@foo
      module:
      - requires:
        - A
        - key: B
          default: lalala
        - foo
      - checkpoint:
          display: Repeating ~{foo} and ~{A} ~{B}.
          source: echo ~{foo} ~{A}~{FOO} ~{B}
expected:
- name: test1
- parent:
    module:
    - name:
      provides:
      - FOO
    - checkpoint:
      - &result
        display: Echoing hello
        source: echo hello
        stdout: {keys: [null, FOO], value: "hello"}
        stderr: {keys: [null, null], value: ""}
        exit: {keys: [null, null], value: 0}
        success: {keys: [null, null], value: true}
        node: {name: local, stdout: FOO}
        user:
        proxy:
      env: {FOO: "hello"}
    outputs: {foo: ~@FOO}
  child:
    module:
    - name:
      requires:
      - A
      - key: B
        default: lalala
      - foo
    - checkpoint:
      - <<: *result
        display: "Repeating hello and This is the message: hello lalala."
        source: "echo hello This is the message: hello lalala"
        node: {name: local}
        stdout: {keys: [null, null], value: "hello This is the message: hello lalala"}
      env: {}
    inputs:
      A: "This is the message: ~{foo}"
      foo: ~@foo

---

label: >-
  Hello world with `:then`, using `:module` `:out` randomly.
env: {}
config:
  main:
  - name: test1
  - parent:
      module:
      - provides:
        - FOO
      - checkpoint:
          display: Echoing hello
          source: echo hello
          nodes:
          - stdout: FOO
      outputs:
        foo: ~@FOO
    child:
    - inputs:
        A: "This is the message: ~{foo}"
        foo: ~@foo
      module:
      - requires:
        - A
        - key: B
          default: ~{A} lalala
        - foo
      - checkpoint:
          display: Repeating ~{foo} and ~{A} ~{B}.
          source: echo ~{foo} ~{A}~{FOO} ~{B}
    - this:
        is:
          a:
            test: ~@foo
expected:
- name: test1
- parent:
    module:
    - name:
      provides:
      - FOO
    - checkpoint:
      - &result
        display: Echoing hello
        source: echo hello
        stdout: {keys: [null, FOO], value: "hello"}
        stderr: {keys: [null, null], value: ""}
        exit: {keys: [null, null], value: 0}
        success: {keys: [null, null], value: true}
        node: {name: local, stdout: FOO}
        user:
        proxy:
      env: {FOO: "hello"}
    outputs: {foo: ~@FOO}
  child:
  - module:
    - name:
      requires:
      - A
      - key: B
        default: ~{A} lalala
      - foo
    - checkpoint:
      - <<: *result
        display: "Repeating hello and This is the message: hello This is the message: hello lalala."
        source: "echo hello This is the message: hello This is the message: hello lalala"
        node: {name: local}
        stdout: {keys: [null, null],
                 value: "hello This is the message: hello This is the message: hello lalala"}
      env: {}
    inputs:
      A: "This is the message: ~{foo}"
      foo: ~@foo
  - this:
      is:
        a:
          test: hello

---

label: >-
  Reducing the outputs of several modules into a list.
env: {}
config:
  main:
  - name: test1
  - parent:
      ~(pmap:
      - ~(fn:
        - [idx]
        - module:
          - requires:
            - idx
            provides:
            - FOO
          - checkpoint:
              display: Echoing hello ~{idx}.
              source: echo hello ~{idx}
              nodes:
              - stdout: FOO
          inputs: {idx: ~@idx}
          outputs:
            foos:
              ~(conj:
              - ~@foos
              - ~@FOO
      - ~(range: [0,3]
    child:
      inputs:
        A: "~{#foos}~{.} ~{/foos}"
      module:
      - requires:
        - A
      - checkpoint:
          display: Echoing ~{A}.
          source: echo ~{A}
expected:
- name: test1
- parent:
  - module:
    - name:
      provides:
      - FOO
      requires:
      - idx
    - checkpoint:
      - display: Echoing hello 0.
        source: echo hello 0
        stdout: {keys: [null, FOO], value: "hello 0"}
        stderr: {keys: [null, null], value: ""}
        exit: {keys: [null, null], value: 0}
        success: {keys: [null, null], value: true}
        node: {name: local, stdout: FOO}
        user:
        proxy:
      env: {FOO: hello 0}
    inputs: {idx: ~@idx}
    outputs:
      foos:
        ~(conj:
        - ~@foos
        - ~@FOO
  - module:
    - name:
      provides:
      - FOO
      requires:
      - idx
    - checkpoint:
      - display: Echoing hello 1.
        source: echo hello 1
        stdout: {keys: [null, FOO], value: "hello 1"}
        stderr: {keys: [null, null], value: ""}
        exit: {keys: [null, null], value: 0}
        success: {keys: [null, null], value: true}
        node: {name: local, stdout: FOO}
        user:
        proxy:
      env: {FOO: hello 1}
    inputs: {idx: ~@idx}
    outputs:
      foos:
        ~(conj:
        - ~@foos
        - ~@FOO
  - module:
    - name:
      provides:
      - FOO
      requires:
      - idx
    - checkpoint:
      - display: Echoing hello 2.
        source: echo hello 2
        stdout: {keys: [null, FOO], value: "hello 2"}
        stderr: {keys: [null, null], value: ""}
        exit: {keys: [null, null], value: 0}
        success: {keys: [null, null], value: true}
        node: {name: local, stdout: FOO}
        user:
        proxy:
      env: {FOO: hello 2}
    inputs: {idx: ~@idx}
    outputs:
      foos:
        ~(conj:
        - ~@foos
        - ~@FOO
  child:
    inputs:
      A: "~{#foos}~{.} ~{/foos}"
    module:
    - name:
      requires:
      - A
    - checkpoint:
      - display: "Echoing hello 2 hello 1 hello 0 ."
        source: "echo hello 2 hello 1 hello 0 "
        stdout: {keys: [null, null], value: "hello 2 hello 1 hello 0"}
        stderr: {keys: [null, null], value: ""}
        exit: {keys: [null, null], value: 0}
        success: {keys: [null, null], value: true}
        node: {name: local}
        user:
        proxy:
      env: {}

