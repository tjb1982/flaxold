label: >-
  Hello world with `:provides` using simple string.
env: {}
config:
  main:
  - name: test1
  - parent:
      module:
      - provides:
        - MSG
      - checkpoint:
          source: echo hello
          nodes:
          - stdout: MSG
      outputs:
        outmsg: ~@MSG
    child:
      module:
      - requires: [inmsg]
      - checkpoint:
          source: echo ~{inmsg}
      inputs:
        inmsg: ~@outmsg
expected:
  header:
    name: test1
  env: {}
  body:
  - parent:
      module:
        header:
          name:
          provides:
          - MSG
        env: {outmsg: hello}
        body:
        - checkpoint:
          - &result
            source: echo hello
            stdout: {keys: [null, MSG], value: "hello"}
            stderr: {keys: [null, null], value: ""}
            exit: {keys: [null, null], value: 0}
            success: {keys: [null, null], value: true}
            node: {name: local, stdout: MSG}
            user:
            proxy:
          env: {MSG: "hello"}
      outputs: {outmsg: ~@MSG}
    child:
      module:
        header:
          name:
          requires: [inmsg]
        env: {}
        body:
        - checkpoint:
          - <<: *result
            node: {name: local}
            stdout: {keys: [null, null], value: "hello"}
          env: {}
      inputs:
        inmsg: ~@outmsg

---

label: >-
  Hello world with `:provides` using simple string and two checkpoints.
env: {}
config:
  main:
  - name: test1
  - parent:
      module:
      - provides:
        - MSG
      - checkpoint:
          source: echo hello
          nodes:
          - stdout: MSG
      - checkpoint:
          source: echo not used
      outputs:
        outmsg: ~@MSG
    child:
      module:
      - requires: [inmsg]
      - checkpoint:
          source: echo ~{inmsg}
      inputs:
        inmsg: ~@outmsg
expected:
  header:
    name: test1
  env: {}
  body:
  - parent:
      module:
        header:
          name:
          provides:
          - MSG
        env: {outmsg: hello}
        body:
        - checkpoint:
          - &result
            source: echo hello
            stdout: {keys: [null, MSG], value: "hello"}
            stderr: {keys: [null, null], value: ""}
            exit: {keys: [null, null], value: 0}
            success: {keys: [null, null], value: true}
            node: {name: local, stdout: MSG}
            user:
            proxy:
          env: {MSG: "hello"}
        - checkpoint:
          - source: echo not used
            stdout: {keys: [null, null], value: "not used"}
            stderr: {keys: [null, null], value: ""}
            exit: {keys: [null, null], value: 0}
            success: {keys: [null, null], value: true}
            node: {name: local}
            user:
            proxy:
          env: {}
      outputs: {outmsg: ~@MSG}
    child:
      module:
        header:
          name:
          requires: [inmsg]
        env: {}
        body:
        - checkpoint:
          - <<: *result
            node: {name: local}
            stdout: {keys: [null, null], value: "hello"}
          env: {}
      inputs:
        inmsg: ~@outmsg

---

label: >-
  Hello world with `:provides` using key/value and two checkpoints.
env: {}
config:
  main:
  - name: test1
  - parent:
      module:
      - provides:
          MSG: ~@MSG
      - checkpoint:
          source: echo not used
      - checkpoint:
          source: echo hello
          nodes:
          - stdout: MSG
      outputs:
        outmsg: ~@MSG
    child:
      module:
      - requires: [inmsg]
      - checkpoint:
          source: echo ~{inmsg}
      inputs:
        inmsg: ~@outmsg
expected:
  header:
    name: test1
  env: {}
  body:
  - parent:
      module:
        header:
          name:
          provides:
            MSG: ~@MSG
        env: {outmsg: hello}
        body:
        - checkpoint:
          - source: echo not used
            stdout: {keys: [null, null], value: "not used"}
            stderr: {keys: [null, null], value: ""}
            exit: {keys: [null, null], value: 0}
            success: {keys: [null, null], value: true}
            node: {name: local}
            user:
            proxy:
          env: {}
        - checkpoint:
          - &result
            source: echo hello
            stdout: {keys: [null, MSG], value: "hello"}
            stderr: {keys: [null, null], value: ""}
            exit: {keys: [null, null], value: 0}
            success: {keys: [null, null], value: true}
            node: {name: local, stdout: MSG}
            user:
            proxy:
          env: {MSG: "hello"}
      outputs: {outmsg: ~@MSG}
    child:
      module:
        header:
          name:
          requires: [inmsg]
        env: {}
        body:
        - checkpoint:
          - <<: *result
            node: {name: local}
            stdout: {keys: [null, null], value: "hello"}
          env: {}
      inputs:
        inmsg: ~@outmsg

---

label: >-
  Hello world with `:provides` using {:key "key" :value "value"} and two checkpoints.
env: {}
config:
  main:
  - name: test1
  - parent:
      module:
      - provides:
          key: MSG
          value: ~@MSG
      - checkpoint:
          source: echo hello
          nodes:
          - stdout: MSG
      - checkpoint:
          source: echo not used
      outputs:
        outmsg: ~@MSG
    child:
      module:
      - requires: [inmsg]
      - checkpoint:
          source: echo ~{inmsg}
      inputs:
        inmsg: ~@outmsg
expected:
  header:
    name: test1
  env: {}
  body:
  - parent:
      module:
        header:
          name:
          provides:
            key: MSG
            value: ~@MSG
        env: {outmsg: hello}
        body:
        - checkpoint:
          - &result
            source: echo hello
            stdout: {keys: [null, MSG], value: "hello"}
            stderr: {keys: [null, null], value: ""}
            exit: {keys: [null, null], value: 0}
            success: {keys: [null, null], value: true}
            node: {name: local, stdout: MSG}
            user:
            proxy:
          env: {MSG: "hello"}
        - checkpoint:
          - source: echo not used
            stdout: {keys: [null, null], value: "not used"}
            stderr: {keys: [null, null], value: ""}
            exit: {keys: [null, null], value: 0}
            success: {keys: [null, null], value: true}
            node: {name: local}
            user:
            proxy:
          env: {}
      outputs: {outmsg: ~@MSG}
    child:
      module:
        header:
          name:
          requires: [inmsg]
        env: {}
        body:
        - checkpoint:
          - <<: *result
            node: {name: local}
            stdout: {keys: [null, null], value: "hello"}
          env: {}
      inputs:
        inmsg: ~@outmsg

---

label: >-
  Hello world with `:provides` using key/value, two checkpoints, and a 
  "complex" provides structure.
env: {}
config:
  main:
  - name: test1
  - parent:
      module:
      - provides:
          MSG_OBJ:
            ~(or:
            - ~@MSG_OBJ
            - greeting: ~@MSG
      - checkpoint:
          source: echo not used
      - checkpoint:
          source: echo hello
          nodes:
          - stdout: MSG
      outputs:
        outmsg: ~@MSG_OBJ.greeting
    child:
      module:
      - requires: [inmsg]
      - checkpoint:
          source: echo ~{inmsg}
      inputs:
        inmsg: ~@outmsg
expected:
  header:
    name: test1
  env: {}
  body:
  - parent:
      module:
        header:
          name:
          provides:
            MSG_OBJ:
              ~(or:
              - ~@MSG_OBJ
              - greeting: ~@MSG
        env: {outmsg: hello}
        body:
        - checkpoint:
          - source: echo not used
            stdout: {keys: [null, null], value: "not used"}
            stderr: {keys: [null, null], value: ""}
            exit: {keys: [null, null], value: 0}
            success: {keys: [null, null], value: true}
            node: {name: local}
            user:
            proxy:
          env: {}
        - checkpoint:
          - &result
            source: echo hello
            stdout: {keys: [null, MSG], value: "hello"}
            stderr: {keys: [null, null], value: ""}
            exit: {keys: [null, null], value: 0}
            success: {keys: [null, null], value: true}
            node: {name: local, stdout: MSG}
            user:
            proxy:
          env: {MSG: "hello"}
      outputs: {outmsg: ~@MSG_OBJ.greeting}
    child:
      module:
        header:
          name:
          requires: [inmsg]
        env: {}
        body:
        - checkpoint:
          - <<: *result
            node: {name: local}
            stdout: {keys: [null, null], value: "hello"}
          env: {}
      inputs:
        inmsg: ~@outmsg

